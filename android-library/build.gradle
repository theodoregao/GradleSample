apply plugin: 'com.android.library'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile files('libs/gson-2.2.4.jar')
    compile 'com.android.support:appcompat-v7:22.1.1'
}

android.libraryVariants.all { variant ->
    task('generate' + capitalize("${variant.name}") + 'Javadoc', type: Javadoc) {
        group 'Panasonic InFlight Android SDK Task'
        description "Generates Javadoc for $variant.name."

        title = "$name $version API"
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://d.android.com/reference/");
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }

    task('extractJarFrom' + capitalize("${variant.name}") + 'Aar', type: Jar) {
        group 'Panasonic InFlight Android SDK Task'
        description 'Create a Jar file with dependencies'

        dependsOn 'assemble' + capitalize("${variant.name}")

        baseName 'android-library-' + capitalize("${variant.name}")
        version getRootProperties().versionName

        File aarFile = file("${buildDir}/outputs/aar/${project.name}-${variant.name}.aar")
        if (aarFile.exists()) {
            def zipFiles = zipTree(aarFile)
            zipFiles.each {
                if (it.toString().endsWith('.jar')) {
                    from zipTree (it).matching {
                        include '**/*.class'
                    }
                }
            }
        }
    }
}